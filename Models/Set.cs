// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Scryfall.API.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Set
    {
        /// <summary>
        /// Initializes a new instance of the Set class.
        /// </summary>
        public Set()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Set class.
        /// </summary>
        /// <param name="setType">Possible values include: 'core', 'expansion',
        /// 'masters', 'masterpiece', 'from_the_vault', 'spellbook',
        /// 'premium_deck', 'duel_deck', 'commander', 'planechase',
        /// 'conspiracy', 'archenemy', 'vanguard', 'funny', 'starter', 'box',
        /// 'promo', 'token', 'memorabilia', 'treasure_chest'</param>
        public Set(string code = default(string), string name = default(string), SetTypes? setType = default(SetTypes?), System.DateTime? releasedAt = default(System.DateTime?), string blockCode = default(string), string block = default(string), int? cardCount = default(int?), bool? digital = default(bool?), bool? foil = default(bool?), string iconSvgUri = default(string), string searchUri = default(string))
        {
            Code = code;
  //          MtgoCode = mtgoCode;
            Name = name;
            SetType = setType;
            ReleasedAt = releasedAt;
            BlockCode = blockCode;
            Block = block;
       //     ParentSetCode = parentSetCode;
            CardCount = cardCount;
            Digital = digital;
//            Foil = foil;
            IconSvgUri = iconSvgUri;
            SearchUri = searchUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "object")]
        public string SetObject { get; set; }

        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }


        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        [JsonProperty(PropertyName = "tcgplayer_id")]
        public string TcgPlayerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uri")]

        public string Uri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scryfall_uri")]

        public string ScryfallUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "search_uri")]
        public string SearchUri { get; set; }

        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "released_at")]
        public System.DateTime? ReleasedAt { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'core', 'expansion',
        /// 'masters', 'masterpiece', 'from_the_vault', 'spellbook',
        /// 'premium_deck', 'duel_deck', 'commander', 'planechase',
        /// 'conspiracy', 'archenemy', 'vanguard', 'funny', 'starter', 'box',
        /// 'promo', 'token', 'memorabilia', 'treasure_chest'
        /// </summary>
        [JsonProperty(PropertyName = "set_type")]
        public SetTypes? SetType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "card_count")]
        public int? CardCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "digital")]
        public bool? Digital { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nonfoil_only")]
        public bool? NonFoilOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "foil_only")]
        public bool? FoilOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "block_code")]
        public string BlockCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "block")]
        public string Block { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "icon_svg_uri")]
        public string IconSvgUri { get; set; }

    }
}
